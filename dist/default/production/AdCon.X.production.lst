

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Sep 03 22:03:15 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    10                           	psect	text4,local,class=CODE,merge=1,delta=2
    11                           	dabs	1,0x7E,2
    12  0000                     
    13                           ; Version 1.45
    14                           ; Generated 16/11/2017 GMT
    15                           ; 
    16                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution.
    30                           ; 
    31                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    32                           ;        software without specific prior written permission.
    33                           ; 
    34                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    35                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    36                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    37                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    38                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    39                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    40                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    41                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    42                           ; 
    43                           ; 
    44                           ; Code-generator required, PIC16F877A Definitions
    45                           ; 
    46                           ; SFR Addresses
    47  0000                     	;# 
    48  0001                     	;# 
    49  0002                     	;# 
    50  0003                     	;# 
    51  0004                     	;# 
    52  0005                     	;# 
    53  0006                     	;# 
    54  0007                     	;# 
    55  0008                     	;# 
    56  0009                     	;# 
    57  000A                     	;# 
    58  000B                     	;# 
    59  000C                     	;# 
    60  000D                     	;# 
    61  000E                     	;# 
    62  000E                     	;# 
    63  000F                     	;# 
    64  0010                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0013                     	;# 
    68  0014                     	;# 
    69  0015                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001B                     	;# 
    77  001B                     	;# 
    78  001C                     	;# 
    79  001D                     	;# 
    80  001E                     	;# 
    81  001F                     	;# 
    82  0081                     	;# 
    83  0085                     	;# 
    84  0086                     	;# 
    85  0087                     	;# 
    86  0088                     	;# 
    87  0089                     	;# 
    88  008C                     	;# 
    89  008D                     	;# 
    90  008E                     	;# 
    91  0091                     	;# 
    92  0092                     	;# 
    93  0093                     	;# 
    94  0094                     	;# 
    95  0098                     	;# 
    96  0099                     	;# 
    97  009C                     	;# 
    98  009D                     	;# 
    99  009E                     	;# 
   100  009F                     	;# 
   101  010C                     	;# 
   102  010D                     	;# 
   103  010E                     	;# 
   104  010F                     	;# 
   105  018C                     	;# 
   106  018D                     	;# 
   107  0008                     _PORTD	set	8
   108  001E                     _ADRESH	set	30
   109  001F                     _ADCON0	set	31
   110  00FA                     _GO_nDONE	set	250
   111  009F                     _ADCON1	set	159
   112  009E                     _ADRESL	set	158
   113  0088                     _TRISD	set	136
   114  0085                     _TRISA	set	133
   115                           
   116                           	psect	cinit
   117  07FC                     start_initialization:	
   118                           ; #config settings
   119                           
   120  07FC                     __initialization:	
   121  07FC                     end_of_initialization:	
   122                           ;End of C runtime variable initialization code
   123                           
   124  07FC                     __end_of__initialization:	
   125  07FC  0183               	clrf	3
   126  07FD  120A  118A  2F20   	ljmp	_main	;jump to C main() function
   127                           
   128                           	psect	cstackCOMMON
   129  0070                     __pcstackCOMMON:	
   130  0070                     ??_ADC_init:	
   131  0070                     ??_init:	
   132                           ; 1 bytes @ 0x0
   133                           
   134  0070                     ?_main:	
   135                           ; 1 bytes @ 0x0
   136                           
   137  0070                     ?_ADC_init:	
   138                           ; 1 bytes @ 0x0
   139                           
   140  0070                     ?_init:	
   141                           ; 2 bytes @ 0x0
   142                           
   143  0070                     ?_ADC_reader:	
   144                           ; 2 bytes @ 0x0
   145                           
   146  0070                     ?___wmul:	
   147                           ; 2 bytes @ 0x0
   148                           
   149  0070                     ___wmul@multiplier:	
   150                           ; 2 bytes @ 0x0
   151                           
   152                           
   153                           ; 2 bytes @ 0x0
   154  0070                     	ds	2
   155  0072                     ??_ADC_reader:	
   156  0072                     ___wmul@multiplicand:	
   157                           ; 1 bytes @ 0x2
   158                           
   159                           
   160                           ; 2 bytes @ 0x2
   161  0072                     	ds	2
   162  0074                     ??___wmul:	
   163  0074                     ADC_reader@read:	
   164                           ; 1 bytes @ 0x4
   165                           
   166  0074                     ___wmul@product:	
   167                           ; 2 bytes @ 0x4
   168                           
   169                           
   170                           ; 2 bytes @ 0x4
   171  0074                     	ds	2
   172  0076                     ADC_reader@channel:	
   173                           
   174                           ; 1 bytes @ 0x6
   175  0076                     	ds	1
   176  0077                     ??_main:	
   177                           
   178                           ; 1 bytes @ 0x7
   179  0077                     	ds	3
   180  007A                     main@aux:	
   181                           
   182                           ; 2 bytes @ 0xA
   183  007A                     	ds	2
   184  007C                     main@read:	
   185                           
   186                           ; 2 bytes @ 0xC
   187  007C                     	ds	2
   188                           
   189                           	psect	maintext
   190  0720                     __pmaintext:	
   191 ;;
   192 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   193 ;;
   194 ;; *************** function _main *****************
   195 ;; Defined at:
   196 ;;		line 37 in file "AD.c"
   197 ;; Parameters:    Size  Location     Type
   198 ;;		None
   199 ;; Auto vars:     Size  Location     Type
   200 ;;  read            2   12[COMMON] unsigned int 
   201 ;;  aux             2   10[COMMON] unsigned int 
   202 ;; Return value:  Size  Location     Type
   203 ;;                  1    wreg      void 
   204 ;; Registers used:
   205 ;;		wreg, status,2, status,0, pclath, cstack
   206 ;; Tracked objects:
   207 ;;		On entry : B00/0
   208 ;;		On exit  : 0/0
   209 ;;		Unchanged: 0/0
   210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   211 ;;      Params:         0       0       0       0       0
   212 ;;      Locals:         4       0       0       0       0
   213 ;;      Temps:          3       0       0       0       0
   214 ;;      Totals:         7       0       0       0       0
   215 ;;Total ram usage:        7 bytes
   216 ;; Hardware stack levels required when called:    2
   217 ;; This function calls:
   218 ;;		_ADC_reader
   219 ;;		___wmul
   220 ;;		_init
   221 ;; This function is called by:
   222 ;;		Startup code after reset
   223 ;; This function uses a non-reentrant model
   224 ;;
   225                           
   226                           
   227                           ;psect for function _main
   228  0720                     _main:	
   229                           
   230                           ;AD.c: 38: unsigned int read = 0, aux = 128;
   231                           
   232                           ;incstack = 0
   233                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   234  0720  01FC               	clrf	main@read
   235  0721  01FD               	clrf	main@read+1
   236  0722  3080               	movlw	128
   237  0723  00FA               	movwf	main@aux
   238  0724  3000               	movlw	0
   239  0725  00FB               	movwf	main@aux+1
   240                           
   241                           ;AD.c: 39: init();
   242  0726  120A  118A  26CB  120A  118A  	fcall	_init
   243  072B  2F3E               	goto	l632
   244  072C                     l636:	
   245                           
   246                           ;AD.c: 43: PORTD = 0b00000001;
   247  072C  3001               	movlw	1
   248  072D  2F3B               	goto	L7
   249  072E                     l640:	
   250                           ;AD.c: 44: }
   251                           
   252                           
   253                           ;AD.c: 46: PORTD = 0b00000011;
   254  072E  3003               	movlw	3
   255  072F  2F3B               	goto	L7
   256  0730                     l644:	
   257                           ;AD.c: 47: }
   258                           
   259                           
   260                           ;AD.c: 49: PORTD = 0b00000111;
   261  0730  3007               	movlw	7
   262  0731  2F3B               	goto	L7
   263  0732                     l648:	
   264                           ;AD.c: 50: }
   265                           
   266                           
   267                           ;AD.c: 52: PORTD = 0b00001111;
   268  0732  300F               	movlw	15
   269  0733  2F3B               	goto	L7
   270  0734                     l652:	
   271                           ;AD.c: 53: }
   272                           
   273                           
   274                           ;AD.c: 55: PORTD = 0b00011111;
   275  0734  301F               	movlw	31
   276  0735  2F3B               	goto	L7
   277  0736                     l656:	
   278                           ;AD.c: 56: }
   279                           
   280                           
   281                           ;AD.c: 58: PORTD = 0b00111111;
   282  0736  303F               	movlw	63
   283  0737  2F3B               	goto	L7
   284  0738                     l660:	
   285                           ;AD.c: 59: }
   286                           
   287                           
   288                           ;AD.c: 61: PORTD = 0b01111111;
   289  0738  307F               	movlw	127
   290  0739  2F3B               	goto	L7
   291  073A                     l664:	
   292                           ;AD.c: 62: }
   293                           
   294                           
   295                           ;AD.c: 64: PORTD = 0b11111111;
   296  073A  30FF               	movlw	255
   297  073B                     L7:	
   298  073B  1283               	bcf	3,5	;RP0=0, select bank0
   299  073C  1303               	bcf	3,6	;RP1=0, select bank0
   300  073D  0088               	movwf	8	;volatile
   301  073E                     l632:	
   302                           ;AD.c: 40: while(1){
   303                           
   304                           ;AD.c: 65: }
   305                           
   306                           
   307                           ;AD.c: 41: read = ADC_reader(2);
   308  073E  3002               	movlw	2
   309  073F  120A  118A  26F5  120A  118A  	fcall	_ADC_reader
   310  0744  0871               	movf	?_ADC_reader+1,w
   311  0745  00FD               	movwf	main@read+1
   312  0746  0870               	movf	?_ADC_reader,w
   313  0747  00FC               	movwf	main@read
   314                           
   315                           ;AD.c: 42: if(read <= aux){
   316  0748  087D               	movf	main@read+1,w
   317  0749  027B               	subwf	main@aux+1,w
   318  074A  1D03               	skipz
   319  074B  2F4E               	goto	u215
   320  074C  087C               	movf	main@read,w
   321  074D  027A               	subwf	main@aux,w
   322  074E                     u215:	
   323  074E  1803               	btfsc	3,0
   324  074F  2F2C               	goto	l636
   325                           
   326                           ;AD.c: 45: else if(read <= aux*2){
   327  0750  087B               	movf	main@aux+1,w
   328  0751  00F8               	movwf	??_main+1
   329  0752  087A               	movf	main@aux,w
   330  0753  00F7               	movwf	??_main
   331  0754  1003               	clrc
   332  0755  0DF7               	rlf	??_main,f
   333  0756  0DF8               	rlf	??_main+1,f
   334  0757  087D               	movf	main@read+1,w
   335  0758  0278               	subwf	??_main+1,w
   336  0759  1D03               	skipz
   337  075A  2F5D               	goto	u225
   338  075B  087C               	movf	main@read,w
   339  075C  0277               	subwf	??_main,w
   340  075D                     u225:	
   341  075D  1803               	btfsc	3,0
   342  075E  2F2E               	goto	l640
   343                           
   344                           ;AD.c: 48: else if(read <= aux*3){
   345  075F  087B               	movf	main@aux+1,w
   346  0760  00F1               	movwf	___wmul@multiplier+1
   347  0761  087A               	movf	main@aux,w
   348  0762  00F0               	movwf	___wmul@multiplier
   349  0763  3003               	movlw	3
   350  0764  00F2               	movwf	___wmul@multiplicand
   351  0765  3000               	movlw	0
   352  0766  00F3               	movwf	___wmul@multiplicand+1
   353  0767  120A  118A  26D4  120A  118A  	fcall	___wmul
   354  076C  087D               	movf	main@read+1,w
   355  076D  0271               	subwf	?___wmul+1,w
   356  076E  1D03               	skipz
   357  076F  2F72               	goto	u235
   358  0770  087C               	movf	main@read,w
   359  0771  0270               	subwf	?___wmul,w
   360  0772                     u235:	
   361  0772  1803               	btfsc	3,0
   362  0773  2F30               	goto	l644
   363                           
   364                           ;AD.c: 51: else if(read <= aux*4){
   365  0774  087B               	movf	main@aux+1,w
   366  0775  00F8               	movwf	??_main+1
   367  0776  087A               	movf	main@aux,w
   368  0777  00F7               	movwf	??_main
   369  0778  1003               	clrc
   370  0779  0DF7               	rlf	??_main,f
   371  077A  0DF8               	rlf	??_main+1,f
   372  077B  1003               	clrc
   373  077C  0DF7               	rlf	??_main,f
   374  077D  0DF8               	rlf	??_main+1,f
   375  077E  087D               	movf	main@read+1,w
   376  077F  0278               	subwf	??_main+1,w
   377  0780  1D03               	skipz
   378  0781  2F84               	goto	u245
   379  0782  087C               	movf	main@read,w
   380  0783  0277               	subwf	??_main,w
   381  0784                     u245:	
   382  0784  1803               	btfsc	3,0
   383  0785  2F32               	goto	l648
   384                           
   385                           ;AD.c: 54: else if(read <= aux*5){
   386  0786  087B               	movf	main@aux+1,w
   387  0787  00F1               	movwf	___wmul@multiplier+1
   388  0788  087A               	movf	main@aux,w
   389  0789  00F0               	movwf	___wmul@multiplier
   390  078A  3005               	movlw	5
   391  078B  00F2               	movwf	___wmul@multiplicand
   392  078C  3000               	movlw	0
   393  078D  00F3               	movwf	___wmul@multiplicand+1
   394  078E  120A  118A  26D4  120A  118A  	fcall	___wmul
   395  0793  087D               	movf	main@read+1,w
   396  0794  0271               	subwf	?___wmul+1,w
   397  0795  1D03               	skipz
   398  0796  2F99               	goto	u255
   399  0797  087C               	movf	main@read,w
   400  0798  0270               	subwf	?___wmul,w
   401  0799                     u255:	
   402  0799  1803               	btfsc	3,0
   403  079A  2F34               	goto	l652
   404                           
   405                           ;AD.c: 57: else if(read <= aux*6){
   406  079B  087B               	movf	main@aux+1,w
   407  079C  00F1               	movwf	___wmul@multiplier+1
   408  079D  087A               	movf	main@aux,w
   409  079E  00F0               	movwf	___wmul@multiplier
   410  079F  3006               	movlw	6
   411  07A0  00F2               	movwf	___wmul@multiplicand
   412  07A1  3000               	movlw	0
   413  07A2  00F3               	movwf	___wmul@multiplicand+1
   414  07A3  120A  118A  26D4  120A  118A  	fcall	___wmul
   415  07A8  087D               	movf	main@read+1,w
   416  07A9  0271               	subwf	?___wmul+1,w
   417  07AA  1D03               	skipz
   418  07AB  2FAE               	goto	u265
   419  07AC  087C               	movf	main@read,w
   420  07AD  0270               	subwf	?___wmul,w
   421  07AE                     u265:	
   422  07AE  1803               	btfsc	3,0
   423  07AF  2F36               	goto	l656
   424                           
   425                           ;AD.c: 60: else if(read <= aux*7){
   426  07B0  087B               	movf	main@aux+1,w
   427  07B1  00F1               	movwf	___wmul@multiplier+1
   428  07B2  087A               	movf	main@aux,w
   429  07B3  00F0               	movwf	___wmul@multiplier
   430  07B4  3007               	movlw	7
   431  07B5  00F2               	movwf	___wmul@multiplicand
   432  07B6  3000               	movlw	0
   433  07B7  00F3               	movwf	___wmul@multiplicand+1
   434  07B8  120A  118A  26D4  120A  118A  	fcall	___wmul
   435  07BD  087D               	movf	main@read+1,w
   436  07BE  0271               	subwf	?___wmul+1,w
   437  07BF  1D03               	skipz
   438  07C0  2FC3               	goto	u275
   439  07C1  087C               	movf	main@read,w
   440  07C2  0270               	subwf	?___wmul,w
   441  07C3                     u275:	
   442  07C3  1803               	btfsc	3,0
   443  07C4  2F38               	goto	l660
   444                           
   445                           ;AD.c: 63: else if(read <= aux*8){
   446  07C5  087B               	movf	main@aux+1,w
   447  07C6  00F8               	movwf	??_main+1
   448  07C7  087A               	movf	main@aux,w
   449  07C8  00F7               	movwf	??_main
   450  07C9  1003               	clrc
   451  07CA  0DF7               	rlf	??_main,f
   452  07CB  0DF8               	rlf	??_main+1,f
   453  07CC  1003               	clrc
   454  07CD  0DF7               	rlf	??_main,f
   455  07CE  0DF8               	rlf	??_main+1,f
   456  07CF  1003               	clrc
   457  07D0  0DF7               	rlf	??_main,f
   458  07D1  0DF8               	rlf	??_main+1,f
   459  07D2  087D               	movf	main@read+1,w
   460  07D3  0278               	subwf	??_main+1,w
   461  07D4  1D03               	skipz
   462  07D5  2FD8               	goto	u285
   463  07D6  087C               	movf	main@read,w
   464  07D7  0277               	subwf	??_main,w
   465  07D8                     u285:	
   466  07D8  1803               	btfsc	3,0
   467  07D9  2F3A               	goto	l664
   468                           
   469                           ;AD.c: 66: else {
   470                           ;AD.c: 67: PORTD = 0b11111111;
   471  07DA  30FF               	movlw	255
   472  07DB  1283               	bcf	3,5	;RP0=0, select bank0
   473  07DC  1303               	bcf	3,6	;RP1=0, select bank0
   474  07DD  0088               	movwf	8	;volatile
   475                           
   476                           ;AD.c: 68: _delay((unsigned long)((500)*(200000000/4000.0)));
   477  07DE  307F               	movlw	127
   478  07DF  00F9               	movwf	??_main+2
   479  07E0  30D4               	movlw	212
   480  07E1  00F8               	movwf	??_main+1
   481  07E2  3031               	movlw	49
   482  07E3  00F7               	movwf	??_main
   483  07E4                     u297:	
   484  07E4  0BF7               	decfsz	??_main,f
   485  07E5  2FE4               	goto	u297
   486  07E6  0BF8               	decfsz	??_main+1,f
   487  07E7  2FE4               	goto	u297
   488  07E8  0BF9               	decfsz	??_main+2,f
   489  07E9  2FE4               	goto	u297
   490  07EA  2FEB               	nop2
   491                           
   492                           ;AD.c: 69: PORTD = 0b00000000;
   493  07EB  1283               	bcf	3,5	;RP0=0, select bank0
   494  07EC  1303               	bcf	3,6	;RP1=0, select bank0
   495  07ED  0188               	clrf	8	;volatile
   496                           
   497                           ;AD.c: 70: _delay((unsigned long)((500)*(200000000/4000.0)));
   498  07EE  307F               	movlw	127
   499  07EF  00F9               	movwf	??_main+2
   500  07F0  30D4               	movlw	212
   501  07F1  00F8               	movwf	??_main+1
   502  07F2  3031               	movlw	49
   503  07F3  00F7               	movwf	??_main
   504  07F4                     u307:	
   505  07F4  0BF7               	decfsz	??_main,f
   506  07F5  2FF4               	goto	u307
   507  07F6  0BF8               	decfsz	??_main+1,f
   508  07F7  2FF4               	goto	u307
   509  07F8  0BF9               	decfsz	??_main+2,f
   510  07F9  2FF4               	goto	u307
   511  07FA  2FFB               	nop2
   512  07FB  2F3E               	goto	l632
   513  07FC                     __end_of_main:	
   514                           
   515                           	psect	text1
   516  06CB                     __ptext1:	
   517 ;; *************** function _init *****************
   518 ;; Defined at:
   519 ;;		line 13 in file "AD.c"
   520 ;; Parameters:    Size  Location     Type
   521 ;;		None
   522 ;; Auto vars:     Size  Location     Type
   523 ;;		None
   524 ;; Return value:  Size  Location     Type
   525 ;;                  2   22[None  ] int 
   526 ;; Registers used:
   527 ;;		wreg, status,2, status,0, pclath, cstack
   528 ;; Tracked objects:
   529 ;;		On entry : 0/0
   530 ;;		On exit  : 0/0
   531 ;;		Unchanged: 0/0
   532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   533 ;;      Params:         0       0       0       0       0
   534 ;;      Locals:         0       0       0       0       0
   535 ;;      Temps:          0       0       0       0       0
   536 ;;      Totals:         0       0       0       0       0
   537 ;;Total ram usage:        0 bytes
   538 ;; Hardware stack levels used:    1
   539 ;; Hardware stack levels required when called:    1
   540 ;; This function calls:
   541 ;;		_ADC_init
   542 ;; This function is called by:
   543 ;;		_main
   544 ;; This function uses a non-reentrant model
   545 ;;
   546                           
   547                           
   548                           ;psect for function _init
   549  06CB                     _init:	
   550                           
   551                           ;AD.c: 14: TRISA = 0xFF;
   552                           
   553                           ;incstack = 0
   554                           ; Regs used in _init: [wreg+status,2+status,0+pclath+cstack]
   555  06CB  30FF               	movlw	255
   556  06CC  1683               	bsf	3,5	;RP0=1, select bank1
   557  06CD  1303               	bcf	3,6	;RP1=0, select bank1
   558  06CE  0085               	movwf	5	;volatile
   559                           
   560                           ;AD.c: 15: TRISD = 0x00;
   561  06CF  0188               	clrf	8	;volatile
   562                           
   563                           ;AD.c: 16: ADC_init();
   564  06D0  120A  118A  26C2   	fcall	_ADC_init
   565  06D3  0008               	return
   566  06D4                     __end_of_init:	
   567                           ;AD.c: 17: return 0;
   568                           ;	Return value of _init is never used
   569                           
   570                           
   571                           	psect	text2
   572  06C2                     __ptext2:	
   573 ;; *************** function _ADC_init *****************
   574 ;; Defined at:
   575 ;;		line 31 in file "AD.c"
   576 ;; Parameters:    Size  Location     Type
   577 ;;		None
   578 ;; Auto vars:     Size  Location     Type
   579 ;;		None
   580 ;; Return value:  Size  Location     Type
   581 ;;                  2    6[None  ] int 
   582 ;; Registers used:
   583 ;;		wreg
   584 ;; Tracked objects:
   585 ;;		On entry : 0/0
   586 ;;		On exit  : 0/0
   587 ;;		Unchanged: 0/0
   588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   589 ;;      Params:         0       0       0       0       0
   590 ;;      Locals:         0       0       0       0       0
   591 ;;      Temps:          0       0       0       0       0
   592 ;;      Totals:         0       0       0       0       0
   593 ;;Total ram usage:        0 bytes
   594 ;; Hardware stack levels used:    1
   595 ;; This function calls:
   596 ;;		Nothing
   597 ;; This function is called by:
   598 ;;		_init
   599 ;; This function uses a non-reentrant model
   600 ;;
   601                           
   602                           
   603                           ;psect for function _ADC_init
   604  06C2                     _ADC_init:	
   605                           
   606                           ;AD.c: 32: ADCON0 = 0x81;
   607                           
   608                           ;incstack = 0
   609                           ; Regs used in _ADC_init: [wreg]
   610  06C2  3081               	movlw	129
   611  06C3  1283               	bcf	3,5	;RP0=0, select bank0
   612  06C4  1303               	bcf	3,6	;RP1=0, select bank0
   613  06C5  009F               	movwf	31	;volatile
   614                           
   615                           ;AD.c: 33: ADCON1 = 0x80;
   616  06C6  3080               	movlw	128
   617  06C7  1683               	bsf	3,5	;RP0=1, select bank1
   618  06C8  1303               	bcf	3,6	;RP1=0, select bank1
   619  06C9  009F               	movwf	31	;volatile
   620  06CA  0008               	return
   621  06CB                     __end_of_ADC_init:	
   622                           ;AD.c: 34: return 0;
   623                           ;	Return value of _ADC_init is never used
   624                           
   625                           
   626                           	psect	text3
   627  06D4                     __ptext3:	
   628 ;; *************** function ___wmul *****************
   629 ;; Defined at:
   630 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
   631 ;; Parameters:    Size  Location     Type
   632 ;;  multiplier      2    0[COMMON] unsigned int 
   633 ;;  multiplicand    2    2[COMMON] unsigned int 
   634 ;; Auto vars:     Size  Location     Type
   635 ;;  product         2    4[COMMON] unsigned int 
   636 ;; Return value:  Size  Location     Type
   637 ;;                  2    0[COMMON] unsigned int 
   638 ;; Registers used:
   639 ;;		wreg, status,2, status,0
   640 ;; Tracked objects:
   641 ;;		On entry : 0/0
   642 ;;		On exit  : 0/0
   643 ;;		Unchanged: 0/0
   644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   645 ;;      Params:         4       0       0       0       0
   646 ;;      Locals:         2       0       0       0       0
   647 ;;      Temps:          0       0       0       0       0
   648 ;;      Totals:         6       0       0       0       0
   649 ;;Total ram usage:        6 bytes
   650 ;; Hardware stack levels used:    1
   651 ;; This function calls:
   652 ;;		Nothing
   653 ;; This function is called by:
   654 ;;		_main
   655 ;; This function uses a non-reentrant model
   656 ;;
   657                           
   658                           
   659                           ;psect for function ___wmul
   660  06D4                     ___wmul:	
   661                           
   662                           ;incstack = 0
   663                           ; Regs used in ___wmul: [wreg+status,2+status,0]
   664  06D4  01F4               	clrf	___wmul@product
   665  06D5  01F5               	clrf	___wmul@product+1
   666  06D6                     l614:	
   667  06D6  1C70               	btfss	___wmul@multiplier,0
   668  06D7  2EDE               	goto	l140
   669  06D8  0872               	movf	___wmul@multiplicand,w
   670  06D9  07F4               	addwf	___wmul@product,f
   671  06DA  1803               	skipnc
   672  06DB  0AF5               	incf	___wmul@product+1,f
   673  06DC  0873               	movf	___wmul@multiplicand+1,w
   674  06DD  07F5               	addwf	___wmul@product+1,f
   675  06DE                     l140:	
   676  06DE  3001               	movlw	1
   677  06DF                     u185:	
   678  06DF  1003               	clrc
   679  06E0  0DF2               	rlf	___wmul@multiplicand,f
   680  06E1  0DF3               	rlf	___wmul@multiplicand+1,f
   681  06E2  3EFF               	addlw	-1
   682  06E3  1D03               	skipz
   683  06E4  2EDF               	goto	u185
   684  06E5  3001               	movlw	1
   685  06E6                     u195:	
   686  06E6  1003               	clrc
   687  06E7  0CF1               	rrf	___wmul@multiplier+1,f
   688  06E8  0CF0               	rrf	___wmul@multiplier,f
   689  06E9  3EFF               	addlw	-1
   690  06EA  1D03               	skipz
   691  06EB  2EE6               	goto	u195
   692  06EC  0870               	movf	___wmul@multiplier,w
   693  06ED  0471               	iorwf	___wmul@multiplier+1,w
   694  06EE  1D03               	btfss	3,2
   695  06EF  2ED6               	goto	l614
   696  06F0  0875               	movf	___wmul@product+1,w
   697  06F1  00F1               	movwf	?___wmul+1
   698  06F2  0874               	movf	___wmul@product,w
   699  06F3  00F0               	movwf	?___wmul
   700  06F4  0008               	return
   701  06F5                     __end_of___wmul:	
   702                           
   703                           	psect	text4
   704  06F5                     __ptext4:	
   705 ;; *************** function _ADC_reader *****************
   706 ;; Defined at:
   707 ;;		line 20 in file "AD.c"
   708 ;; Parameters:    Size  Location     Type
   709 ;;  channel         1    wreg     unsigned char 
   710 ;; Auto vars:     Size  Location     Type
   711 ;;  channel         1    6[COMMON] unsigned char 
   712 ;;  read            2    4[COMMON] unsigned int 
   713 ;; Return value:  Size  Location     Type
   714 ;;                  2    0[COMMON] unsigned int 
   715 ;; Registers used:
   716 ;;		wreg, status,2, status,0
   717 ;; Tracked objects:
   718 ;;		On entry : 0/0
   719 ;;		On exit  : 0/0
   720 ;;		Unchanged: 0/0
   721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   722 ;;      Params:         2       0       0       0       0
   723 ;;      Locals:         3       0       0       0       0
   724 ;;      Temps:          2       0       0       0       0
   725 ;;      Totals:         7       0       0       0       0
   726 ;;Total ram usage:        7 bytes
   727 ;; Hardware stack levels used:    1
   728 ;; This function calls:
   729 ;;		Nothing
   730 ;; This function is called by:
   731 ;;		_main
   732 ;; This function uses a non-reentrant model
   733 ;;
   734                           
   735                           
   736                           ;psect for function _ADC_reader
   737  06F5                     _ADC_reader:	
   738                           
   739                           ;incstack = 0
   740                           ; Regs used in _ADC_reader: [wreg+status,2+status,0]
   741                           ;ADC_reader@channel stored from wreg
   742  06F5  00F6               	movwf	ADC_reader@channel
   743                           
   744                           ;AD.c: 21: unsigned int read;
   745                           ;AD.c: 22: ADCON0 = ADCON0 & 0xC7;
   746  06F6  1283               	bcf	3,5	;RP0=0, select bank0
   747  06F7  1303               	bcf	3,6	;RP1=0, select bank0
   748  06F8  081F               	movf	31,w	;volatile
   749  06F9  39C7               	andlw	199
   750  06FA  009F               	movwf	31	;volatile
   751                           
   752                           ;AD.c: 23: ADCON0 = ADCON0 | (channel<<3);
   753  06FB  0876               	movf	ADC_reader@channel,w
   754  06FC  00F2               	movwf	??_ADC_reader
   755  06FD  3002               	movlw	2
   756  06FE                     u155:	
   757  06FE  1003               	clrc
   758  06FF  0DF2               	rlf	??_ADC_reader,f
   759  0700  3EFF               	addlw	-1
   760  0701  1D03               	skipz
   761  0702  2EFE               	goto	u155
   762  0703  1003               	clrc
   763  0704  0D72               	rlf	??_ADC_reader,w
   764  0705  041F               	iorwf	31,w	;volatile
   765  0706  009F               	movwf	31	;volatile
   766                           
   767                           ;AD.c: 24: _delay((unsigned long)((2)*(200000000/4000.0)));
   768  0707  3082               	movlw	130
   769  0708  00F3               	movwf	??_ADC_reader+1
   770  0709  30DD               	movlw	221
   771  070A  00F2               	movwf	??_ADC_reader
   772  070B                     u317:	
   773  070B  0BF2               	decfsz	??_ADC_reader,f
   774  070C  2F0B               	goto	u317
   775  070D  0BF3               	decfsz	??_ADC_reader+1,f
   776  070E  2F0B               	goto	u317
   777  070F  2F10               	nop2
   778                           
   779                           ;AD.c: 25: GO_nDONE = 1;
   780  0710  1283               	bcf	3,5	;RP0=0, select bank0
   781  0711  1303               	bcf	3,6	;RP1=0, select bank0
   782  0712  151F               	bsf	31,2	;volatile
   783  0713                     l26:	
   784                           ;AD.c: 26: while(GO_nDONE);
   785                           
   786  0713  191F               	btfsc	31,2	;volatile
   787  0714  2F13               	goto	l26
   788                           
   789                           ;AD.c: 27: read = (ADRESH<<8)+ADRESL;
   790  0715  081E               	movf	30,w	;volatile
   791  0716  00F5               	movwf	ADC_reader@read+1
   792  0717  1683               	bsf	3,5	;RP0=1, select bank1
   793  0718  1303               	bcf	3,6	;RP1=0, select bank1
   794  0719  081E               	movf	30,w	;volatile
   795  071A  00F4               	movwf	ADC_reader@read
   796                           
   797                           ;AD.c: 28: return read;
   798  071B  0875               	movf	ADC_reader@read+1,w
   799  071C  00F1               	movwf	?_ADC_reader+1
   800  071D  0874               	movf	ADC_reader@read,w
   801  071E  00F0               	movwf	?_ADC_reader
   802  071F  0008               	return
   803  0720                     __end_of_ADC_reader:	
   804  007E                     btemp	set	126	;btemp
   805  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_ADC_reader

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0     916
                                              7 COMMON     7     7      0
                         _ADC_reader
                             ___wmul
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
                           _ADC_init
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     516
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _ADC_reader                                           7     5      2      45
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_reader
   ___wmul
   _init
     _ADC_init

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Sep 03 22:03:15 2019

                     l26 0713      ___wmul@multiplicand 0072                      l140 06DE  
                    l614 06D6                      l640 072E                      l632 073E  
                    l660 0738                      l652 0734                      l644 0730  
                    l636 072C                      l664 073A                      l656 0736  
                    l648 0732                      u215 074E                      u225 075D  
                    u155 06FE                      u307 07F4                      u235 0772  
                    u317 070B                      u245 0784                      u255 0799  
                    u185 06DF                      u265 07AE                      u195 06E6  
                    u275 07C3                      u285 07D8                      u297 07E4  
    __size_of_ADC_reader 002B                     _main 0720                     _init 06CB  
                   btemp 007E                     start 0000         __end_of_ADC_init 06CB  
                  ?_main 0070                    ?_init 0070                    _PORTD 0008  
                  _TRISA 0085                    _TRISD 0088                    status 0003  
                  wtemp0 007E          __initialization 07FC             __end_of_main 07FC  
           __end_of_init 06D4                   ??_main 0077                   ??_init 0070  
                 _ADCON0 001F                   _ADCON1 009F                   _ADRESH 001E  
                 _ADRESL 009E           ADC_reader@read 0074             ??_ADC_reader 0072  
                 ___wmul 06D4                ?_ADC_init 0070       __end_of_ADC_reader 0720  
__end_of__initialization 07FC           __pcstackCOMMON 0070               ??_ADC_init 0070  
             __pmaintext 0720                  ?___wmul 0070          __size_of___wmul 0021  
                __ptext1 06CB                  __ptext2 06C2                  __ptext3 06D4  
                __ptext4 06F5                  main@aux 007A     end_of_initialization 07FC  
      ADC_reader@channel 0076        __size_of_ADC_init 0009           __end_of___wmul 06F5  
    start_initialization 07FC                 ??___wmul 0074                ___latbits 0002  
               _ADC_init 06C2           ___wmul@product 0074                 _GO_nDONE 00FA  
      ___wmul@multiplier 0070               _ADC_reader 06F5            __size_of_main 00DC  
          __size_of_init 0009                 main@read 007C              ?_ADC_reader 0070  
